@using Domain.InterfacesWorker
@using Microsoft.Extensions.Localization
@using MudCeramWorkshop.Client.Components.Dialogs
@using MudCeramWorkshop.Client.Components.Layout.Resources
@using MudCeramWorkshop.Client.Utils.ComponentBase
@using MudCeramWorkshop.Data.Domain.InterfacesWorker
@inherits CustomLayoutComponentBase

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>

    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => ToggleDrawer())" />
        <MudButton Href="/" Variant="Variant.Filled" DropShadow="false" Color="Color.Primary" Style="text-transform:none">@WorkshopName</MudButton>
        <MudIconButton Icon="@Icons.Material.Outlined.Add" Color="Color.Inherit" OnClick="@((e) => NewProduct())" />

        <MudSpacer />

        <MudMenu ActivationEvent="MouseEvent.MouseOver" Icon="@Icons.Custom.Uncategorized.Radioactive">
            <ActivatorContent>
                <MudFab EndIcon="@Icons.Material.Filled.Person" Color="Color.Primary" Size="Size.Small" />
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem Href="/Profil">@Localizer["Profile"]</MudMenuItem>
                <MudMenuItem Href="/Logout">@Localizer["SignOut"]</MudMenuItem>
            </ChildContent>
        </MudMenu>
    </MudAppBar>

    <MudDrawer Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>

    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>


@code {
    [Inject] IStringLocalizer<MenuTranslation> Localizer { get; set; } = default!;
    [Inject] IDialogService Dialog { get; set; } = default!;

    bool _drawerOpen = true;
    string WorkshopName = string.Empty;

    protected override Task OnInitializedAsync()
    {
        if (Session.IsAuthenticate)
        {
            WorkshopName = Session.Workshop?.Name ?? string.Empty;
        }

        return Task.CompletedTask;
    }

    private Task ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;

        return Task.CompletedTask;
    }

    private Task NewProduct()
    {

        var options = new DialogOptions { CloseOnEscapeKey = true };

        return Dialog.ShowAsync<TestDialog>("Custom Options Dialog", options);
    }

}