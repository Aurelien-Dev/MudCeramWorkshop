<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link rel="icon" type="image/ico" href="favicon.ico" />
    <HeadOutlet @rendermode="RenderModeForPage" />
</head>

<body style="@BgBodyClass">
    <Routes @rendermode="RenderModeForPage" />
    <script src="_framework/blazor.web.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
</body>

</html>
@code {
    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;
    [Inject] public AuthenticationStateProvider authenticationStateProvider { get; set; }
    [Inject] public NavigationManager NavigationManager { get; set; }
    // [CascadingParameter(Name = "WorkshopName")] public string WorkshopName { get; set; }

    private IComponentRenderMode? RenderModeForPage;
    private string BgBodyClass = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext.Request.Path.StartsWithSegments("/Account"))
        {
            RenderModeForPage = null;
            BgBodyClass = "background-color:var(--mud-palette-primary)";
        }
        else
        {
            RenderModeForPage = new InteractiveServerRenderMode(false);
            BgBodyClass = string.Empty;
        }

        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Get the Fullname claim
        // WorkshopName = user.FindFirst("WorkshopName").Value;
        var workshopId = user.FindFirst("WorkshopId");



        // await localStorage.SetItemAsync("WorkshopName", workshopName);
        // await localStorage.SetItemAsync("WorkshopId", workshopId);

        if (!user.Identity.IsAuthenticated && !HttpContext.Request.Path.StartsWithSegments("/Account"))
            NavigationManager.NavigateTo($"Account/Login");
    }
}
