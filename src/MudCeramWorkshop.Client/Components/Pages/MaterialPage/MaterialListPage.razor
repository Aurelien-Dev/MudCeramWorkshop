@page "/Materials"
@using Microsoft.Extensions.Localization
@using System.Globalization
@using MudCeramWorkshop.Client.Components.Dialogs
@using MudCeramWorkshop.Client.Components.Pages.ProductPages.Resources
@using MudCeramWorkshop.Data.Domain.InterfacesRepository
@using MudCeramWorkshop.Data.Domain.Models.MainDomain
@using MudCeramWorkshop.Data.Domain.Models.MainDomain.Enums

@inherits MudCeramWorkshop.Client.Utils.ComponentBase.CustomComponentBase


<MudContainer Class="mt-3 px-8" MaxWidth="MaxWidth.False">

    <MudTabs Elevation="1" Rounded="false" ActivePanelIndexChanged="PanelChanged" @ref="_tabs">
        <Header>
            <MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="delete" OnClick="Add" Class="ma-1"></MudIconButton>
        </Header>
        <ChildContent>
            <MudTabPanel Text="@(EnumMaterialType.Argile.ToString())" ID="EnumMaterialType.Argile" BadgeData="@countArgile" />
            <MudTabPanel Text="@(EnumMaterialType.Email.ToString())" ID="EnumMaterialType.Email" BadgeData="@countEmail" />
            <MudTabPanel Text="@(EnumMaterialType.Engobe.ToString())" ID="EnumMaterialType.Engobe" BadgeData="@countEngobe" />
            <MudTabPanel Text="@(EnumMaterialType.Accessory.ToString())" ID="EnumMaterialType.Accessory" BadgeData="@countAccessory" />
        </ChildContent>
    </MudTabs>

    <MudDataGrid @ref="_dataGrid" T="Material" Items="@Elements" Dense="true" Class="rounded-0" FixedHeader="true" Height="calc(100vh - 210px)" ReadOnly="false"
                 Virtualize="true"
                 EditDialogOptions="new DialogOptions(){ NoHeader = true }"
                 EditMode="DataGridEditMode.Form"
                 EditTrigger="DataGridEditTrigger.Manual"
                 CommittedItemChanges="@CommittedItemChanges">

        <Columns>
            <PropertyColumn Property="x => x.Reference" Title="Reference" />
            <PropertyColumn Property="x => x.Name" Title="Name" />
            <PropertyColumn Property="x => x.Cost" Title="Cost">
                <CellTemplate>
                    @($"{context.Item.Cost}/{context.Item.Quantity}{context.Item.UniteMesure}")
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.Quantity" Title="Quantity" Hidden="true" />
            <PropertyColumn Property="x => x.UniteMesure" Title="UniteMesure" Hidden="true">
                <EditTemplate>
                    <MudSelect T="EnumMaterialUnite" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Label="TT"
                               @bind-Value="context.Item.UniteMesure">
                        @foreach (EnumMaterialUnite item in Enum.GetValues(typeof(EnumMaterialUnite)))
                        {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                        }
                    </MudSelect>
                </EditTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.Comment" Title="Comment" />
            <TemplateColumn CellClass="d-flex justify-end" Sortable="false">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                    <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteItem(context.Item))" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Material" PageSizeOptions="@([25, 50, 100])" />
        </PagerContent>
    </MudDataGrid>

</MudContainer>

@code {
    [Inject] IStringLocalizer<ProductTranslation> Localizer { get; set; } = default!;
    [Inject] IMaterialRepository MaterialRepository { get; set; } = default!;
    private IEnumerable<Material> Elements { get; set; } = new List<Material>();

    MudDataGrid<Material> _dataGrid;
    MudTabs _tabs;

    int countEngobe = 0;
    int countArgile = 0;
    int countEmail = 0;
    int countAccessory = 0;

    protected override async Task OnInitializedAsync()
    {
        await GetDatas();
    }

    public async Task GetDatas()
    {
        EnumMaterialType type = EnumMaterialType.Argile;

        if (_tabs is not null && _tabs.ActivePanel is not null)
            type = (EnumMaterialType)_tabs.ActivePanel.ID;

        Elements = await MaterialRepository.GetAll(type);

        countEngobe = await MaterialRepository.Count(EnumMaterialType.Engobe);
        countArgile = await MaterialRepository.Count(EnumMaterialType.Argile);
        countEmail = await MaterialRepository.Count(EnumMaterialType.Email);
        countAccessory = await MaterialRepository.Count(EnumMaterialType.Accessory);
    }

    async Task PanelChanged(int index)
    {
        await GetDatas();
    }

    public async Task CommittedItemChanges(Material item)
    {
        await MaterialRepository.Update(item);
    }

    public async Task DeleteItem(Material item)
    {
        await MaterialRepository.Delete(item);
        await GetDatas();
    }

    public async Task Add()
    {
        await _dataGrid.SetEditingItemAsync(new Material("", "")
            {
                Type = (EnumMaterialType)_tabs.ActivePanel.ID
            });

        await GetDatas();
    }
}