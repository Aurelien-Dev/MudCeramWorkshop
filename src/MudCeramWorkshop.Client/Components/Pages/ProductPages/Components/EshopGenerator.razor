@using OpenAI_API
@using OpenAI_API.Chat



@code {
    [Parameter] public Action LaunchGPT { get; set; }
    [Inject] IConfiguration Config { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {        
        LaunchGPT = async () =>
        {
            var api = new OpenAIAPI(Config["OpenAiSecret"]);


            byte[] image = await DownloadImageAsByteArray("https://i.ibb.co/920bn6d/DSCF7314.jpg");
            string imageBase64 = Convert.ToBase64String(image);
            string imageDataUrl = $"data:image/jpeg;base64,{imageBase64}";

            string assistant = @"Tu es un assistant marketing, Ton rôle est de générer une description de produit.

- Une section courte qui décrit le produit (couleurs, forme, etc).
- Une seconde section qui sera une liste de point qui donne les infos technique (dimensions,  brillant ou mat, etc)

Je te donne des tags pour orienter ta description mais tu n'est pas obligé d'utiliser tout ces termes.

Finir la description par cette phrase : En choisissant ce Chawan, vous optez pour une pièce unique réalisée à la main par un céramiste passionné, garantissant une qualité et un savoir-faire artisanal. ❤️

Je ne veut pas de markdown.

Tags:
Bol Matcha, Chawan, Matcha, art du thé

Dimension : diamètre 15cm, hauteur 9cm
Produits utilisés : Grès de Saint-Amand-en-Puisaye

Tone of voice
Chaleureux, passionné, et enthousiaste, avec une touche de sophistication. L'objectif est de mettre en avant la qualité artisanale et l'élégance du produit.

Éléments Clés
Émoticônes: Utilisez des émoticônes pour renforcer le ton et rendre le texte plus engageant.
Mise en Forme: Utilisez des caractères gras, italiques et des listes à puces pour rendre le contenu plus digeste.

Langage et Terminologie
Langage Simple: Évitez le jargon technique sauf si nécessaire.
Termes Positifs: Utilisez un langage qui est positif et encourageant.

Ponctuation
Mets des sauts de ligne après tes points et fin de phrases afin que les lignes de la description ne soient pas hyper longues.";

            var result = await api.Chat.CreateChatCompletionAsync([
                new ChatMessage( ChatMessageRole.Assistant, assistant),
            new ChatMessage( ChatMessageRole.User, "", [new ChatMessage.ImageInput(imageDataUrl)])
            ], model: "gpt-4o");
            Console.WriteLine(result);

        };
    }

    public async Task<byte[]> DownloadImageAsByteArray(string imageUrl)
    {
        using (HttpClient client = new HttpClient())
        {
            return await client.GetByteArrayAsync(imageUrl);
        }
    }


}