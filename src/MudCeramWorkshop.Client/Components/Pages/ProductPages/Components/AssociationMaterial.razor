@using MudCeramWorkshop.Client.Components.Pages.ProductPages.Resources
@using MudCeramWorkshop.Client.Utils.Extension

@inherits CustomComponentBase

@if (Product is not null && Product.Id is not null)
{
    <MudDataGrid @ref="_dataGrid" T="ProductMaterial" Items="@ProductMaterials" Dense="true" FixedHeader="false" Elevation="0" Bordered="true" SortMode="SortMode.None"
                 ReadOnly="false" Class="ma-0 pa=0"
                 Virtualize="true"
                 EditDialogOptions="new DialogOptions(){ NoHeader = true }"
                 EditMode="DataGridEditMode.Cell"
                 CommittedItemChanges="@CommittedItemChanges">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Materiaux utilisés</MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="Add" OnClick="OpenDialog"> </MudIconButton>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Material.Name" Title="Name" Editable="false">
                <CellTemplate>
                    @context.Item.Material.Reference

                    <MudTooltip Text="@context.Item.Material.Name">
                        <MudIcon Icon="@Icons.Material.Outlined.Info" Color="Color.Info" Size="Size.Small" />
                    </MudTooltip>
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.Cost" Title="Cost" Editable="false">
                <CellTemplate>
                    @((context.Item.Cost / context.Item.Material.Quantity).ToStringMonetary(CurrentCultur)) /@context.Item.Material.UniteMesure.ToString()
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.Quantity" Title="Quantity" />
            <PropertyColumn Property="x => x.Material.Type" Title="Type" Editable="false">
                <CellTemplate>
                    @(context.Item.Material.Type.ToString())
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.CalculatedCost" Title="CalculatedCost" Editable="false">
                <CellTemplate>
                    @($"{(context.Item.CalculatedCost).ToStringMonetary(CurrentCultur)}")
                </CellTemplate>
            </PropertyColumn>

            <TemplateColumn Sortable="false" Editable="false">
                <CellTemplate>
                    <MudStack Row="true">
                        <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteItem(context.Item))" />
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}

@code {
    [Parameter] public Product Product { get; set; } = default!;

    [Inject] IStringLocalizer<ProductTranslation> Localizer { get; set; } = default!;
    [Inject] IProductMaterialRepository ProductMaterialRepository { get; set; } = default!;
    [Inject] IDialogService DialogService { get; set; } = default!;

    public ICollection<ProductMaterial> ProductMaterials { get; set; } = new List<ProductMaterial>();

    MudDataGrid<ProductMaterial> _dataGrid = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetDatas();
        }
    }

    public async Task GetDatas()
    {
        if (Product.Id is not null)
            ProductMaterials = await ProductMaterialRepository.GetAll(Product.Id.Value, ComponentDisposed);

        StateHasChanged();
    }

    public async Task CommittedItemChanges(ProductMaterial item)
    {
        await ProductMaterialRepository.Update(item, ComponentDisposed);
    }

    public async Task DeleteItem(ProductMaterial item)
    {
        bool? result = await Dialog.ShowMessageBox("Warning", "Deleting can not be undone!",
             yesText: "Delete!", cancelText: "Cancel",
             options: new DialogOptions()
                 {
                     CloseOnEscapeKey = true
                 });

        if (!result.HasValue || !result.Value) return;

        await ProductMaterialRepository.Delete(item, ComponentDisposed);
        await GetDatas();
    }


    public async Task OpenDialog()
    {
        var options = new DialogOptions
            {
                BackgroundClass = "my-custom-class",
                MaxWidth = MaxWidth.Small,
                FullWidth = true

            };

        var dialog = await DialogService.ShowAsync<DialogProductMaterial>("Choisir les materiaux à ajouter", options);
        var result = await dialog.Result;

        if (result is not null && result.Data is not null)
            foreach (var item in (ICollection<Material>)result.Data)
            {
                var pMat = new ProductMaterial(item.Id, Product.Id!.Value, 500, item.Cost);
                await ProductMaterialRepository.Update(pMat, ComponentDisposed);
            }

        await GetDatas();
    }
}