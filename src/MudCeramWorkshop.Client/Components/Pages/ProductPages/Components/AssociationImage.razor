@inherits CustomComponentBase

@if (ProductId is not null)
{
    <MudItem md="6" xs="12">

        <MudPaper Class="pa-0 mud-height-full" MinHeight="600px">

            <MudStack Class="mud-height-full">
                <MudCarousel TData="ImageInstruction" @ref="_carousel" Style="height:70%" ItemsSource="@ImageInstructions"
                             ShowArrows="true" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="false"
                             SelectedIndexChanged="CarouselIndexChanged"
                             BulletsColor="Color.Primary" BulletsPosition="Position.Bottom">
                    <BulletTemplate Context="selected">
                        <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                            <span class="mud-icon-button-label">
                                <MudIcon Icon="@(selected ? Icons.Material.Filled.RadioButtonChecked : Icons.Material.Filled.RadioButtonUnchecked)" Color="@Color.Primary" />
                            </span>
                        </div>
                    </BulletTemplate>
                    <PreviousButtonTemplate>
                        <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                            <span class="mud-icon-button-label">
                                <MudIcon Class="mud-ripple mud-ripple-icon mud-icon-button-size-medium" Icon="@Icons.Material.Filled.NavigateBefore" Color="@Color.Primary" />
                            </span>
                        </div>
                    </PreviousButtonTemplate>
                    <NextButtonTemplate>
                        <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                            <span class="mud-icon-button-label">
                                <MudIcon Class="mud-ripple mud-ripple-icon mud-icon-button-size-medium" Icon="@Icons.Material.Filled.NavigateNext" Color="@Color.Primary" />
                            </span>
                        </div>
                    </NextButtonTemplate>

                    <ItemTemplate>
                        <div class="d-flex" style="height:100%">
                            <MudImage Src="@(context.UrlMedium)"
                                      ObjectFit="ObjectFit.Cover" ObjectPosition="ObjectPosition.Center"
                                      Style="width:100%; height:100%"
                                      Class="rounded-t-lg" />
                        </div>
                    </ItemTemplate>
                </MudCarousel>

                <MudCard Elevation="0">
                    <MudCardHeader Class="px-3 py-0">
                        <CardHeaderContent>
                            <MudText Typo="Typo.subtitle2">Commentaire</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Default" OnClick="@(async () => await AddImageDialog(null))" />
                            @if (ImageInstructions.Any())
                            {
                                <MudIconButton Icon="@Icons.Material.Outlined.Edit" Color="Color.Default" OnClick="@(async () => await AddImageDialog(ProductId))" />
                                <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Error" OnClick="DeleteImage" />
                            }
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent Class="px-3 py-0">
                        <MudText>
                            @SelectedImageComment
                        </MudText>
                    </MudCardContent>
                </MudCard>


            </MudStack>
        </MudPaper>
    </MudItem>
}

@code {
    [Parameter] public int? ProductId { get; set; } = default!;
    [Inject] public IImageInstructionRepository ImageInstructionRepository { get; set; } = default!;
    [Inject] IDialogService DialogService { get; set; } = default!;
    [Inject] private FileUploader fileUploader { get; set; } = default!;

    public string SelectedImageComment { get; set; } = string.Empty;
    public IList<ImageInstruction> ImageInstructions { get; set; } = new List<ImageInstruction>();

    private MudCarousel<ImageInstruction> _carousel = default!;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetDatas();
        }
    }

    public async Task GetDatas()
    {
        if (ProductId is not null)
            ImageInstructions = await ImageInstructionRepository.GetAll(ProductId.Value);

        if (ImageInstructions.Any())
            _carousel.MoveTo(0);

        StateHasChanged();
    }

    public async Task AddImageDialog(int? idProduct)
    {
        var options = new DialogOptions
            {
                BackgroundClass = "my-custom-class",
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var parameters = new DialogParameters<DialogImageAssociation>
        {
            { x => x.IdProduct, idProduct},
        };

        if (idProduct.HasValue)
        {
            ImageInstruction imageToUpdate = _carousel.ItemsSource!.ElementAt(_carousel.SelectedIndex);

            parameters.Add(x => x.Comment, imageToUpdate.Comment);
            parameters.Add(x => x.ButtonText, "Update");
            parameters.Add(x => x.Title, "Modifier le commentaire");
        }
        else
        {
            parameters.Add(x => x.ButtonText, "Add");
            parameters.Add(x => x.Title, "Ajouter une nouvelle image");
        }

        var dialog = await DialogService.ShowAsync<DialogImageAssociation>(string.Empty, parameters, options);
        var result = await dialog.Result;

        if (result == null || result.Canceled) return;

        //Adding image
        if (!idProduct.HasValue && result.Data is not null)
        {
            await AddImage((ImageInstruction)result.Data);
            return;
        }

        //Updating image comment
        if (idProduct.HasValue && result.Data is not null)
        {
            await UpdateImage((ImageInstruction)result.Data);
        }

    }

    public async Task UpdateImage(ImageInstruction img)
    {
        ImageInstruction imageToUpdate = _carousel.ItemsSource!.ElementAt(_carousel.SelectedIndex);
        imageToUpdate.Comment = img.Comment;

        await ImageInstructionRepository.Update(imageToUpdate);

        await CarouselIndexChanged(_carousel.SelectedIndex);
        StateHasChanged();
    }


    public async Task AddImage(ImageInstruction img)
    {
        img.IdProduct = ProductId!.Value;
        img.Comment = LoremNET.Lorem.Words(35, 45);

        await ImageInstructionRepository.Add(img);
        ImageInstructions.Add(img);

        _carousel.MoveTo(ImageInstructions.Count - 1);
        await CarouselIndexChanged(ImageInstructions.Count - 1);

        StateHasChanged();
    }

    public async Task DeleteImage()
    {
        if (!ImageInstructions.Any()) return;

        bool? result = await Dialog.ShowMessageBox("Warning", "Deleting can not be undone!",
        yesText: "Delete!", cancelText: "Cancel",
        options: new DialogOptions()
            {
                CloseOnEscapeKey = true
            });

        if (!result.HasValue || !result.Value) return;
        if (_carousel != null && _carousel.ItemsSource != null && !_carousel!.ItemsSource.Any()) return;


        ImageInstruction imageToDelete = _carousel!.ItemsSource!.ElementAt(_carousel.SelectedIndex);

        fileUploader.RemoveFileInput(imageToDelete.Url);
        fileUploader.RemoveFileInput(imageToDelete.UrlMedium);

        await ImageInstructionRepository.Delete(imageToDelete);
        ImageInstructions.RemoveAt(_carousel.SelectedIndex);

        SelectedImageComment = string.Empty;

        StateHasChanged();

        if (ImageInstructions.Any())
        {
            _carousel.MoveTo(0);
            await CarouselIndexChanged(0);
        }
    }

    public Task CarouselIndexChanged(int index)
    {
        SelectedImageComment = ImageInstructions[index].Comment;

        return Task.CompletedTask;
    }
}
