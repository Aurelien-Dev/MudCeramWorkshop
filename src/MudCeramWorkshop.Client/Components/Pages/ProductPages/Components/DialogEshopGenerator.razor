@using MudCeramWorkshop.Client.Managers
@using MudCeramWorkshop.Data.Domain.Models.MainDomain.Enums
@using OpenAI_API
@using OpenAI_API.Chat

<MudDialog>
    <DialogContent>
        <MudAlert Severity="Severity.Success" Variant="Variant.Outlined" Class="mb-2">
            Informations fournis à Chat GPT pour la génération de la description
        </MudAlert>
        <MudGrid>
            <MudItem lg="6">

                <MudImage Src="@(_imageUrl)"
                          ObjectFit="ObjectFit.Cover" ObjectPosition="ObjectPosition.Center"
                          Style="width:100%; height:100%"
                          Class="rounded-t-lg" />


            </MudItem>
            <MudItem lg="6">
                <MudStack Style="width: 100%" Spacing="0">
                    <MudTextField Value="_materials" Label="Matières" Variant="Variant.Text" ReadOnly="true" Margin="Margin.Dense" />
                    <MudTextField Value="_tags" Label="Tags" Variant="Variant.Text" ReadOnly="true" Margin="Margin.Dense" />
                    <MudTextField Value="_diameter" Label="Diamètre" Variant="Variant.Text" ReadOnly="true" Margin="Margin.Dense" />
                    <MudTextField Value="_height" Label="Hauteur" Variant="Variant.Text" ReadOnly="true" Margin="Margin.Dense" />


                    <MudTextField T="string" Label="Outlined" Variant="Variant.Outlined" Text="@_description" Lines="10">
                    </MudTextField>
                    <MudTextField @bind-Value="_cost" Label="Coût de la requête" Variant="Variant.Text" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.EuroSymbol" ReadOnly="true" />
                </MudStack>
                <MudOverlay Visible="_loading" DarkBackground="true" Absolute="true">
                    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
                </MudOverlay>
            </MudItem>
        </MudGrid>

    </DialogContent>
    <DialogActions>
        <MudLoadingButton @bind-Loading="_loading" Size="Size.Large" LoadingAdornment="Adornment.End" OnClick="GenerateEshopDescription" Variant="Variant.Filled" Color="Color.Primary">CLICK ME</MudLoadingButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Enregistrer</MudButton>
    </DialogActions>
</MudDialog>

<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>

@code {
    [Inject] IConfiguration Config { get; set; } = default!;
    [Inject] NavigationManager Navigation { get; set; } = default!;
    [Inject] ChatGptManager ChatGptManager { get; set; } = default!;
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public Product Product { get; set; } = new();
    [Parameter] public List<ProductMaterial> ProductMaterials { get; set; } = new();
    [Parameter] public ImageInstruction ImageInstruction { get; set; } = new();

    private bool _loading = false;

    private string _description = string.Empty;
    private decimal _cost = 0;
    private double _diameter = 0;
    private double _height = 0;
    private string _tags = string.Empty;
    private string _materials = string.Empty;
    private string _imageUrl = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var mats = ProductMaterials.Where(m => m.Material.Type == EnumMaterialType.Argile).Select(s => s.Material.Name).ToArray();

        _materials = string.Join(',', mats);
        _tags = string.Join(',', Product.Tags.ToArray());
        _diameter = Product.TopDiameter.Value;
        _height = Product.Height.Value;

        // Obtenir l'URL de base dynamiquement
        string baseUrl = Navigation.BaseUri;
        if (ImageInstruction != null)
        {
            // Remplacer les barres obliques inverses par des barres obliques
            string filePath = ImageInstruction.UrlMedium.Replace("\\", "/");
            // Combiner l'URL de base avec le chemin du fichier
            _imageUrl = $"{baseUrl}{filePath}";
        }
    }

    private void Submit() => MudDialog.Close(DialogResult.Ok(_description));

    public async Task GenerateEshopDescription()
    {
        _loading = true;



        //(string description, decimal cost) = await ChatGptManager.GenerateDescription(_imageUrl, _materials, _tags, _diameter, _height);
        string description = "";
        decimal cost = 11;
        _description = description;
        _cost = cost;

        _loading = false;
    }
}