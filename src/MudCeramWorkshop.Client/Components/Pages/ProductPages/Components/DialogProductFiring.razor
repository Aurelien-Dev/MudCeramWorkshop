<MudDialog>
    <DialogContent>
        <MudSelectExtended T="Firing" MultiSelection="true" ItemCollection="Firings" SearchBox="true" @bind-SelectedValues="SelectedFirings" ValuePresenter="ValuePresenter.Chip" ChipCloseable="true"
                           SearchBoxAutoFocus="true" SearchFunc="@(new Func<Firing, string, bool>(SearchItems))"
                           Label="Cuissons" SearchBoxPlaceholder="Recherhe"
                           AnchorOrigin="Origin.TopCenter" TransformOrigin="Origin.BottomCenter" Variant="Variant.Outlined"
                           SearchBoxClearable="true"
                           MultiSelectionTextFunc="@GetMultiSelectionText">
        </MudSelectExtended>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; } = default!;
    [Inject] public IFiringRepository FiringRepository { get; set; } = default!;

    ICollection<Firing> Firings = new List<Firing>();
    private IEnumerable<Firing> SelectedFirings { get; set; } = new HashSet<Firing>() { };

    protected override async Task OnInitializedAsync()
    {
        Firings = await FiringRepository.GetAll();
    }

    private string? GetMultiSelectionText(List<Firing> selectedValues)
    {
        if (!selectedValues.Any())
            return null;

        return string.Join(", ", selectedValues.Select(m => $"{m.Name}"));
    }

    private bool SearchItems(Firing value, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true; // Si la chaîne de recherche est vide, on considère que l'élément correspond.

        // Sépare la chaîne de recherche en mots
        var searchWords = searchString.Split(' ', StringSplitOptions.RemoveEmptyEntries);

        // Vérifie que chaque mot est contenu dans la chaîne de recherche du Material
        return Array.TrueForAll(searchWords, word => value.StringSearch().Contains(word, StringComparison.OrdinalIgnoreCase));
    }

    private void Submit() => MudDialog.Close(DialogResult.Ok(SelectedFirings));

    private void Cancel() => MudDialog.Cancel();
}