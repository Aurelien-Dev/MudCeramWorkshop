@page "/"
@page "/Products"
@using MudCeramWorkshop.Client.Components.Pages.ProductPages.Resources
@using MudCeramWorkshop.Data.Domain.InterfacesRepository
@using MudCeramWorkshop.Data.Domain.Models.MainDomain

@inherits MudCeramWorkshop.Client.Utils.ComponentBase.CustomComponentBase

<MudText Typo="Typo.h6">ProductList</MudText>



<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        @foreach (Product product in products.OrderBy(p => p.Name))
        {
            <MudItem xs="12" sm="4" md="3">
                <MudCard Elevation="2" Style="height:100%">
                    @if (product.ImageInstructions is not null && product.ImageInstructions.Any())
                    {
                        <MudCardMedia Image="@product.ImageInstructions.First().UrlMedium.Replace("\\","/")" Height="200" loading="lazy" />
                    }
                    else
                    {
                        <MudCardMedia Image="https://fotorama.io/fit/frog.png" Height="200" loading="lazy" />
                    }
                    <MudCardContent>
                        <MudText Typo="Typo.h6" GutterBottom="false">@product.Name</MudText>
                        <MudText Typo="Typo.overline" GutterBottom="false">#@product.Reference</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="@($"product/{@product.Id}")" Size="Size.Small">@Localizer["ProductList_ShowProduct"]</MudButton>
                        <MudSpacer />
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete" Style="@($"color:{Colors.Red.Lighten1};")" Size="Size.Medium" OnClick="@(() => DeleteItem(product))" />
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    [Inject] IStringLocalizer<ProductTranslation> Localizer { get; set; } = default!;
    [Inject] IProductRepository productRepository { get; set; } = default!;

    private ICollection<Product> products = new List<Product>();

    protected override async Task OnInitializedAsync()
    {
        await GetDatas();
    }

    public async Task GetDatas()
    {
        UserInfoState userState = await UserInfoState;
        products = await productRepository.GetAll(userState.GetWorkshopId(), ComponentDisposed);
    }

    public async Task DeleteItem(Product item)
    {
        bool? result = await Dialog.ShowMessageBox("Warning", "Deleting can not be undone!",
        yesText: "Delete!", cancelText: "Cancel",
        options: new DialogOptions()
            {
                CloseOnEscapeKey = true
            });

        if (!result.HasValue || !result.Value) return;

        await productRepository.Delete(item, ComponentDisposed);
        await GetDatas();
    }
}
