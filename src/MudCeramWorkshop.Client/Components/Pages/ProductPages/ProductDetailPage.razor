@page "/Product/{id:int?}"
@page "/Product/New"
@using Microsoft.AspNetCore.Identity
@using MudCeramWorkshop.Client.Components.Pages.ProductPages.Components
@using MudCeramWorkshop.Client.Components.Pages.ProductPages.Resources
@using MudCeramWorkshop.Client.Utils
@using MudCeramWorkshop.Data.Domain.Models.Identity

@inherits CustomComponentBase

@if (product is not null)
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="d-flex flex-grow-1 gap-4 align-top" Style="height: 100vh;">

        <MudStack Class="mud-width-full">

            <MudGrid Spacing="1">
                <MudItem md="2" xs="12">
                    <MudTextField @bind-Value="@product.Reference" Label="Reference" ShrinkLabel="true"
                                  Typo="Typo.h6" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Tag" Variant="Variant.Text"></MudTextField>
                </MudItem>
                <MudItem md="10" xs="12">
                    <MudTextField @bind-Value="@product.Name" Label="Name" ShrinkLabel="true"
                                  Typo="Typo.h6" Variant="Variant.Text"></MudTextField>
                </MudItem>
            </MudGrid>

            <MudGrid Spacing="1">

                <AssociationImage @ref="associationImage" ProductId="product.Id" />

                <MudItem md="6" xs="12">
                    <MudPaper Class="pa-4" MinHeight="600px">
                        <MudText Typo="Typo.h6">Informations</MudText>

                        <MudTextField ShrinkLabel="true" @bind-Value="@product.Height" Label="@Localizer["Text_Height"]" Variant="Variant.Text" Margin="margin"></MudTextField>
                        <MudTextField ShrinkLabel="true" @bind-Value="@product.TopDiameter" Label="@Localizer["Text_TopDiameter"]" Variant="Variant.Text" Margin="margin"></MudTextField>
                        <MudTextField ShrinkLabel="true" @bind-Value="@product.BottomDiameter" Label="@Localizer["Text_BottomDiameter"]" Variant="Variant.Text" Margin="margin"></MudTextField>
                        <MudTextField ShrinkLabel="true" @bind-Value="@product.Price" Label="@Localizer["Text_SellingPrice"]" Variant="Variant.Text" Margin="margin" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.AttachMoney"></MudTextField>

                        <MudTextField ShrinkLabel="true" @bind-Value="@product.Description" Label="@Localizer["Text_Description"]" Variant="Variant.Text" Lines="3" Margin="margin"></MudTextField>

                        <MudTextField ShrinkLabel="true" @bind-Value="@product.DesignInstruction" Label="@Localizer["Text_DesignInstructions"]" Variant="Variant.Text" Lines="3" Margin="margin"></MudTextField>
                        <MudTextField ShrinkLabel="true" @bind-Value="@product.GlazingInstruction" Label="@Localizer["Text_GlazingInstructions"]" Variant="Variant.Text" Lines="3" Margin="margin"></MudTextField>

                        <MudChipField ShrinkLabel="true" T="string" @bind-Values="@product.Tags" Label="Tags" />


                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateProduct">@(IsNewProduct ? "Enregistre le nouveau produit" : "Sauvegarder") </MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenEshopGPT">Launch GPT</MudButton>

                    </MudPaper>
                </MudItem>

            </MudGrid>

            <MudGrid Spacing="1">

                <AssociationMaterial @ref="associationMaterial" ProductId="product.Id" />


                <AssociationFiring ProductId="product.Id" />

            </MudGrid>

        </MudStack>

    </MudContainer>
}

@code {
    [Inject] IStringLocalizer<ProductTranslation> Localizer { get; set; } = default!;
    [Inject] IProductRepository productRepository { get; set; } = default!;
    [Inject] IProductFiringRepository productFiringRepository { get; set; } = default!;
    [Parameter] public int? Id { get; set; } = default!;

    private AssociationImage associationImage;
    private AssociationMaterial associationMaterial;

    #region styling

    private readonly Margin margin = Margin.Normal;
    private bool IsNewProduct = false;

    #endregion

    private Product product = default!;

    protected override async Task OnInitializedAsync()
    {
        UserInfoState userState = await UserInfoState;

        await base.OnInitializedAsync();
        if (Id is not null)
            product = await productRepository.Get(Id.Value, userState.GetWorkshopId(), ComponentDisposed);
        else
        {
            product = new Product(userState.GetWorkshopId(), string.Empty, string.Empty);
            IsNewProduct = true;
        }

        if (product is null)
            throw new ArgumentNullException("Product is allready null after loading");
    }

    public async Task OpenEshopGPT()
    {
        var options = new DialogOptions
            {
                BackgroundClass = "my-custom-class",
                CloseButton = true,
                BackdropClick = false,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };

        var parameters = new DialogParameters<DialogEshopGenerator>
        {
            { x => x.Product, product },
            { x => x.ProductMaterials, associationMaterial.ProductMaterials},
            { x=> x.ImageInstruction, associationImage.SelectedImage}
        };

        var dialog = await Dialog.ShowAsync<DialogEshopGenerator>("Eshop description generator", parameters, options);
    }

    public async Task UpdateProduct()
    {
        if (product is null) return;

        await productRepository.Update(product, ComponentDisposed);

        if (IsNewProduct)
        {
            NavigationManager.NavigateTo($"Product/{product.Id}", true);
            IsNewProduct = false;
        }
    }

}